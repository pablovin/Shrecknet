"use client";
import { useState } from "react";
import AuthGuard from "../components/auth/AuthGuard";
import DashboardLayout from "../components/DashboardLayout";
import { useAuth } from "../components/auth/AuthProvider";
import { hasRole } from "../lib/roles";
import { useAgents } from "../lib/useAgents";
import { useWorlds } from "../lib/userWorlds";
import { usePages } from "../lib/usePage";
import { useConcepts } from "../lib/useConcept";
import Image from "next/image";
import Link from "next/link";

export default function AgentWriterPage() {
  const { user } = useAuth();
  const { agents, isLoading: agentsLoading } = useAgents();
  const { worlds } = useWorlds();
  const [selectedAgent, setSelectedAgent] = useState<any>(null);
  const { pages } = usePages(selectedAgent ? { gameworld_id: selectedAgent.world_id } : {});
  const { concepts } = useConcepts(selectedAgent?.world_id);

  const [search, setSearch] = useState("");
  const [sortField, setSortField] = useState("name");
  const [sortAsc, setSortAsc] = useState(true);
  const [pageIndex, setPageIndex] = useState(0);
  const PAGE_SIZE = 10;

  if (!hasRole(user?.role, "world builder") && !hasRole(user?.role, "system admin")) {
    return (
      <DashboardLayout>
        <div className="p-10 text-2xl text-red-600 font-bold">Not authorized</div>
      </DashboardLayout>
    );
  }

  const writerAgents = agents.filter(a => a.task === "page writer");
  const worldsMap: Record<number, any> = {};
  worlds.forEach(w => { worldsMap[w.id] = w; });

  if (!selectedAgent) {
    return (
      <AuthGuard>
        <DashboardLayout>
          <div className="min-h-screen w-full bg-[var(--background)] text-[var(--foreground)] px-2 sm:px-6 py-8">
            <div className="mx-auto max-w-xl flex flex-col gap-4">
              <h1 className="text-xl font-bold text-[var(--primary)] text-center mb-4">Select a Scribe Agent</h1>
              <p>Use of one of the existing scribes to help you to construct new pages!</p>
              <p>These agents will read a page, and based on their knowledge of the whole world they are associated with, they can propose nwq pages, or update existing pages, helping to populate the world with more rich content! </p>
              {agentsLoading ? (
                <div className="text-center">Loading agents...</div>
              ) : (
                writerAgents.map(a => (
                  <button
                    key={a.id}
                    onClick={() => setSelectedAgent(a)}
                    className="flex items-center gap-3 px-3 py-2 rounded-xl border border-[var(--primary)] hover:bg-[var(--primary)]/10"
                  >
                    <Image src={a.logo || "/images/default/avatars/logo.png"} alt={a.name} width={32} height={32} className="w-8 h-8 rounded object-cover" />
                    <span className="font-semibold text-[var(--primary)]">{a.name}</span>
                    {worldsMap[a.world_id] && (
                      <span className="text-sm text-[var(--foreground)]/70">({worldsMap[a.world_id].name})</span>
                    )}
                  </button>
                ))
              )}
            </div>
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  const conceptMap: Record<number, any> = {};
  concepts.forEach(c => { conceptMap[c.id] = c; });

  let filtered = pages.filter(
    p => p.name?.toLowerCase().includes(search.toLowerCase()) && p.content && p.content.trim() !== ""
  );

  filtered.sort((a, b) => {
    let va: any;
    let vb: any;
    if (sortField === "name") { va = a.name; vb = b.name; }
    else if (sortField === "concept") { va = conceptMap[a.concept_id]?.name || ""; vb = conceptMap[b.concept_id]?.name || ""; }
    else if (sortField === "autogenerated") { va = a.autogenerated_content ? 1 : 0; vb = b.autogenerated_content ? 1 : 0; }
    else { va = a.updated_at || ""; vb = b.updated_at || ""; }
    if (va < vb) return sortAsc ? -1 : 1;
    if (va > vb) return sortAsc ? 1 : -1;
    return 0;
  });

  const totalPages = Math.ceil(filtered.length / PAGE_SIZE) || 1;
  const paginated = filtered.slice(pageIndex * PAGE_SIZE, pageIndex * PAGE_SIZE + PAGE_SIZE);

  function changeSort(field: string) {
    if (sortField === field) setSortAsc(!sortAsc); else { setSortField(field); setSortAsc(true); }
  }

  return (
    <AuthGuard>
      <DashboardLayout>
        <div className="min-h-screen w-full bg-[var(--background)] text-[var(--foreground)] px-2 sm:px-6 py-8">
          <div className="mx-auto max-w-5xl w-full flex flex-col gap-6">
            <div className="flex items-center gap-4">
              <Image src={selectedAgent.logo || "/images/default/avatars/logo.png"} alt={selectedAgent.name} width={48} height={48} className="w-12 h-12 rounded object-cover border border-[var(--primary)]" />
              <div className="flex flex-col">
                <h2 className="text-xl font-bold text-[var(--primary)]">{selectedAgent.name}</h2>
                <span className="text-sm text-[var(--foreground)]/70">{worldsMap[selectedAgent.world_id]?.name || ""}</span>
                <p> Hi! My name is {selectedAgent.name}, and I am heere to help you create more content for {worldsMap[selectedAgent.world_id]?.name}! First, select which pages you want me to read, so we can start the scribing proccess!</p>
              </div>
              <button onClick={() => { setSelectedAgent(null); setSearch(""); }} className="ml-auto text-sm text-[var(--primary)] hover:underline">
                Change Agent
              </button>
            </div>

            <input
              className="px-3 py-2 rounded-xl border border-[var(--primary)] bg-[var(--card-bg)] text-sm w-full"
              placeholder="Search pages..."
              value={search}
              onChange={e => { setSearch(e.target.value); setPageIndex(0); }}
            />

            <div className="overflow-x-auto">
              <table className="min-w-full text-sm">
                <thead>
                  <tr className="text-left text-[var(--primary)]">
                    <th></th>
                    <th className="cursor-pointer" onClick={() => changeSort('name')}>Name</th>
                    <th className="cursor-pointer" onClick={() => changeSort('concept')}>Concept</th>
                    <th className="cursor-pointer" onClick={() => changeSort('autogenerated')}>AI Content</th>
                    <th className="cursor-pointer" onClick={() => changeSort('updated_at')}>Updated</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody>
                  {paginated.map(p => (
                    <tr key={p.id} className="border-b border-[var(--border)] hover:bg-[var(--surface)]">
                      <td className="py-2">
                        <Image src={p.logo || "/images/pages/concept/concept.png"} alt={p.name} width={32} height={32} className="w-8 h-8 rounded object-cover" />
                      </td>
                      <td className="py-2 font-semibold">{p.name}</td>
                      <td className="py-2">{conceptMap[p.concept_id]?.name || ""}</td>
                      <td className="py-2 text-center">{p.autogenerated_content ? 'Yes' : 'No'}</td>
                      <td className="py-2">{p.updated_at ? new Date(p.updated_at).toLocaleDateString() : '-'}</td>
                      <td className="py-2 text-right">
                        <Link
                          href={`/agent_writer/${selectedAgent.id}/${p.id}`}
                          className="px-3 py-1 rounded-xl bg-[var(--primary)] text-[var(--primary-foreground)] text-xs hover:bg-[var(--accent)]"
                        >
                          Ask {selectedAgent.name}
                        </Link>
                      </td>
                    </tr>
                  ))}
                  {paginated.length === 0 && (
                    <tr><td colSpan={6} className="text-center py-4">No pages found.</td></tr>
                  )}
                </tbody>
              </table>
            </div>

            <div className="flex items-center justify-between mt-2">
              <button
                disabled={pageIndex === 0}
                onClick={() => setPageIndex(p => Math.max(0, p - 1))}
                className="px-3 py-1 rounded-xl border border-[var(--primary)] text-[var(--primary)] disabled:opacity-50"
              >
                Previous
              </button>
              <span className="text-sm">Page {pageIndex + 1} of {totalPages}</span>
              <button
                disabled={pageIndex >= totalPages - 1}
                onClick={() => setPageIndex(p => Math.min(totalPages - 1, p + 1))}
                className="px-3 py-1 rounded-xl border border-[var(--primary)] text-[var(--primary)] disabled:opacity-50"
              >
                Next
              </button>
            </div>
          </div>
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}
